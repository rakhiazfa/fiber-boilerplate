// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gofiber/fiber/v3"
	"github.com/google/wire"
	"github.com/rakhiazfa/fiber-boilerplate/internal/config/application"
	"github.com/rakhiazfa/fiber-boilerplate/internal/config/database"
	"github.com/rakhiazfa/fiber-boilerplate/internal/config/logger"
	"github.com/rakhiazfa/fiber-boilerplate/internal/delivery/http/handler"
	"github.com/rakhiazfa/fiber-boilerplate/internal/delivery/http/router"
	"github.com/rakhiazfa/fiber-boilerplate/internal/repository"
	"github.com/rakhiazfa/fiber-boilerplate/internal/service"
)

// Injectors from wire.go:

func Bootstrap() *fiber.App {
	logrusLogger := logger.New()
	errorHandler := handler.NewErrorHandler(logrusLogger)
	db := database.NewPostgreSQLConnection(logrusLogger)
	healthCheckService := service.NewHealthCheckService(db)
	healthCheckHandler := handler.NewHealthCheckHandler(healthCheckService)
	healthCheckRouter := router.NewHealthCheckRouter(healthCheckHandler)
	userRepository := repository.NewUserRepository(db)
	userService := service.NewUserService(logrusLogger, db, userRepository)
	authService := service.NewAuthService(userService)
	authHandler := handler.NewAuthHandler(authService)
	authRouter := router.NewAuthRouter(authHandler)
	app := application.New(errorHandler, healthCheckRouter, authRouter)
	return app
}

// wire.go:

var healthCheckModule = wire.NewSet(service.NewHealthCheckService, handler.NewHealthCheckHandler, router.NewHealthCheckRouter)

var userModule = wire.NewSet(repository.NewUserRepository, service.NewUserService)

var authModule = wire.NewSet(service.NewAuthService, handler.NewAuthHandler, router.NewAuthRouter)
